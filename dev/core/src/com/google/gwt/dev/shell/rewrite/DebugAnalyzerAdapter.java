/*
 * Copyright 2010 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.gwt.dev.shell.rewrite;

import static com.google.gwt.dev.shell.rewrite.HostedModeClassRewriter.EXTRA_DEBUG_DATA;

import com.google.gwt.dev.asm.Attribute;
import com.google.gwt.dev.asm.ByteVector;
import com.google.gwt.dev.asm.ClassWriter;
import com.google.gwt.dev.asm.Label;
import com.google.gwt.dev.asm.MethodVisitor;
import com.google.gwt.dev.asm.commons.AnalyzerAdapter;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * A utility base class that allows rewriting passes to record label-based
 * messages in the emitted bytecode.
 */
class DebugAnalyzerAdapter extends AnalyzerAdapter {
  /**
   * Used to record debugging data generated by {@link #recordDebugData}.
   * 
   * @see #visitEnd()
   */
  private static class DebugAttribute extends Attribute {
    private final LinkedHashMap<Label, String> debugData;

    private DebugAttribute(String name, LinkedHashMap<Label, String> debugData) {
      super(name);
      this.debugData = debugData;
    }

    @Override
    protected Label[] getLabels() {
      return debugData.keySet().toArray(new Label[debugData.size()]);
    }

    @Override
    protected ByteVector write(ClassWriter cw, byte[] code, int len,
        int maxStack, int maxLocals) {
      StringBuilder sb = new StringBuilder();
      for (Map.Entry<Label, String> entry : debugData.entrySet()) {
        String line = "Offset " + entry.getKey().getOffset() + " : "
            + entry.getValue() + "\n";
        sb.append(line);
      }
      ByteVector toReturn = new ByteVector();
      toReturn.putUTF8(sb.toString());
      return toReturn;
    }
  }

  /**
   * Decodes the UTF8-as-octets output from javap.
   */
  public static void main(String args[]) throws IOException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    Pattern p = Pattern.compile("[0-9A-F]{2}");
    String line;
    while ((line = reader.readLine()) != null) {
      if (line.length() > 0) {
        Matcher m = p.matcher(line);
        while (m.find()) {
          bytes.write(Byte.parseByte(m.group(), 16));
        }
      } else {
        String message = new String(bytes.toByteArray());
        System.out.println(message);
        bytes = new ByteArrayOutputStream();
      }
    }
  }

  private final LinkedHashMap<Label, String> debugData = EXTRA_DEBUG_DATA
      ? new LinkedHashMap<Label, String>() : null;

  protected DebugAnalyzerAdapter(String owner, int access, String name,
      String desc, MethodVisitor mv) {
    super(owner, access, name, desc, mv);
  }

  /**
   * Record debugging data, if any, in an extra attribute on the method.
   */
  @Override
  public void visitEnd() {
    if (EXTRA_DEBUG_DATA && !debugData.isEmpty()) {
      super.visitAttribute(new DebugAttribute(getClass().getCanonicalName(),
          debugData));
    }
    super.visitEnd();
  }

  /**
   * When things go wrong in the field, users can enable rewritten class-file
   * dumping and send us the class files. Most of the other rewriting passes add
   * whole classes or methods so their effects are easy to find. Since this
   * rewriting pass is rather subtle, we'll add an extra method attribute that
   * contains a UTF8-encoded diagnostic log.
   */
  protected void recordDebugData(String message) {
    if (EXTRA_DEBUG_DATA) {
      Label castLocation = new Label();
      debugData.put(castLocation, message);
      super.visitLabel(castLocation);
    }
  }
}
