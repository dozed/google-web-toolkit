/*
 * Copyright 2010 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.gwt.editor.client;

import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.adapters.StringEditor;
import com.google.gwt.junit.client.GWTTestCase;

/**
 * Uses the SimpleBeanEditorTest to test core Editor behaviors as generated by
 * AbstractEditorDriverGenerator.
 */
public class SimpleBeanEditorTest extends GWTTestCase {
  @Override
  protected void gwtSetUp() throws Exception {
    personAddress = new Address();
    personAddress.city = "City";
    personAddress.street = "Street";

    manager = new Person();
    manager.name = "Bill";

    person = new Person();
    person.address = personAddress;
    person.name = "Alice";
    person.manager = manager;
  }

  Person person;
  Address personAddress;
  Person manager;

  class Address {
    String city;
    String street;

    public String getCity() {
      return city;
    }

    public String getStreet() {
      return street;
    }

    public void setCity(String city) {
      this.city = city;
    }

    public void setStreet(String street) {
      this.street = street;
    }
  }

  static final String UNINITIALIZED = "uninitialized";

  class AddressEditor implements Editor<Address> {
    StringEditor city = StringEditor.of(UNINITIALIZED);
    StringEditor street = StringEditor.of(UNINITIALIZED);
  }

  class Person {
    String name;
    Address address;
    Person manager;

    public Address getAddress() {
      return address;
    }

    public Person getManager() {
      return manager;
    }

    public String getName() {
      return name;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void setManager(Person manager) {
      this.manager = manager;
    }

    public void setName(String name) {
      this.name = name;
    }
  }

  class PersonEditor implements Editor<Person> {
    AddressEditor addressEditor = new AddressEditor();
    StringEditor name = StringEditor.of(UNINITIALIZED);
    @Path("manager.name")
    StringEditor managerName = StringEditor.of(UNINITIALIZED);
  }

  interface PersonEditorDriver extends
      SimpleBeanEditorDriver<Person, PersonEditor> {
  }

  @Override
  public String getModuleName() {
    return "com.google.gwt.editor.Editor";
  }

  public void test() {
    PersonEditorDriver driver = GWT.create(PersonEditorDriver.class);
    PersonEditor editor = new PersonEditor();
    driver.initialize(editor);
    driver.edit(person);
    assertEquals("Alice", editor.name.getValue());
    assertEquals("City", editor.addressEditor.city.getValue());
    assertEquals("Street", editor.addressEditor.street.getValue());
    assertEquals("Bill", editor.managerName.getValue());

    editor.name.setValue("Charles");
    editor.addressEditor.city.setValue("Wootville");
    editor.addressEditor.street.setValue("12345");
    editor.managerName.setValue("David");

    driver.flush();
    assertEquals("Charles", person.name);
    assertEquals("Wootville", person.address.city);
    assertEquals("12345", person.address.street);
    assertEquals("David", person.manager.name);
  }

  public void testLifecycle() {
    PersonEditorDriver driver = GWT.create(PersonEditorDriver.class);
    try {
      driver.edit(person);
      fail("Should have thrown execption");
    } catch (IllegalStateException expected) {
    }
    driver.initialize(new PersonEditor());
    try {
      driver.flush();
      fail("Should have thrown exception");
    } catch (IllegalStateException expected) {
    }
    driver.edit(person);
    driver.flush();
  }
}
